// generated by tools
// AHeadLib.Net
// https://github.com/bodong1987/AHeadLib.Net
// Powered by bodong

#include <windows.h>
#include "MiniTools.h"

#if defined(_WIN64) || defined(_X64) || defined(WIN64) || defined( __LP64__ )
#define AHEAD_LIB_DOT_NET_X64_BUILD 1
#else
#define AHEAD_LIB_DOT_NET_X64_BUILD 0
#endif

// checked get function in native dll
namespace
{
    LPVOID CheckedGetFunction(HMODULE module, const char* methodName)
    {
        const auto Result = reinterpret_cast<LPVOID>(GetProcAddress(module, methodName));

        if (Result == nullptr)
        {
            char szMessage[256];
            wsprintfA(szMessage, "Failed bind method:%s", methodName);

            OutputDebugStringA(szMessage);

#if defined(DEBUG) || defined(_DEBUG)
            MessageBoxA(nullptr, szMessage, "AHeadLib.Net Error", 0);
            ExitProcess(-1);
#endif
        }

        return Result;
    }    
}

#define AHEAD_LIB_DOT_NET_BIND_FUNCTION(name) name##Ptr = CheckedGetFunction(module, #name)

// ReSharper disable IdentifierTypo
// ReSharper disable CppInconsistentNaming
// ${EXPORTED_POINTERS}

// ${EXPORTED_FUNCTIONS}

// ${EXPORTED_LINKERS}
// ReSharper restore IdentifierTypo
// ReSharper restore CppInconsistentNaming

// bind native dll first
extern void GetOriginalLibraryPath(TCHAR* bufferPtr, int bufferLength, const TCHAR* libName);

void CheckedLoad()
{
    TCHAR szPath[MAX_PATH];

    GetOriginalLibraryPath(szPath, MAX_PATH, TEXT("${LIBRARY_NAME}"));

    // if your dll is not in system path
    // please reset szPath here
    const HMODULE module = LoadLibrary(szPath);

    if (module == nullptr)
    {
        TCHAR szMessage[MAX_PATH];
        wsprintf(szMessage, TEXT("Failed load dll from:%s"), szPath);
        AHEAD_LIB_SHOW_MESSAGE_BOX(nullptr, szMessage, TEXT("AHeadLib.Net Error"), 0);
        
        ExitProcess(1);
    }

    // ReSharper disable IdentifierTypo
    // ReSharper disable CppInconsistentNaming
    // ReSharper disable StringLiteralTypo
    // ${BIND_POINTERS}    
    // ReSharper restore IdentifierTypo
    // ReSharper restore CppInconsistentNaming
    // ReSharper restore StringLiteralTypo
}
